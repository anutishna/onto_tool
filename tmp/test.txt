Чему учат задачи проекта

Проект встраивается в осенний тренировочный турнир, когда в чемпионат вливаются много начинающих изучать программирование. Именно поэтому в проекте так много задач, не требующих программирования циклов. Это задачи 1, 6, 7, 9 и 10. Несмотря на такое упрощение, проект учит довольно многому.

Во-первых, задачи проекта показывают, каким образом с помощью весьма простого устройства – таймера программного управления, можно организовать достаточно сложный процесс. У таймера всего две команды: включить и выключить указанный канал в заданный момент времени. А посмотрите, как много действий удается запрограммировать:

•	перемещение брусков начинки;
•	разрезание начинки;
•	загрузка начинки в камеру глазирования;
•	перемещение заготовки конфетной коробки на стол упаковки и такое ее позиционирование, которое позволяет простым способом перегрузить конфеты из камеры охлаждения в коробку;
•	фиксация конфет в зоне коробки так, чтобы они не возвратились назад в камеру охлаждения вместе с возвращаемым лотком;
•	завершение автоматического изготовления коробки – загибание краев и термосварка;
•	перемещение коробки в место "приземления" крышки;
•	перемещение крышки из зоны складирования в зону упаковки и закрывание конфетной коробки;
•	перемещение коробки с конфетами в контейнер исполненных интернет-заказов.

Естественно, что для всех этих операций нужны соответствующие исполнительные устройства: двигатели, пневмозахваты, толкатели, фиксаторы, приспособление для термосварки. В проектах автоматизации обычно участвуют различные специалисты: технологи, инженеры по электроприводу и автоматизации производства, программисты. Программист отвечает за то, чтобы программы управления обеспечивали функционирование исполнительных устройств в соответствие с технологическим процессом.

Прочувствовать способность примитивных команд таймера выполнять реальную работу легче всего, решая задачу 7. Именно с этой задачи лучше всего начинать решать задачи проекта. Решив эту задачу, будет много проще понимать связь между камандами таймера и операциями автоматизируемого процесса.

Во-вторых, содержание задач учит параметризации. Параметризация в любых задачах цифрового управления является одной из самых важных работ. Зачастую от качества выполнения этой работы зависит успех всего проекта. Параметризация – это осмысление автоматизируемого процесса и выделение в нем всех значимых параметров.

В проекте "Таймер" в качестве главного параметра выступает время. Сначала это абстрактное время включения и выключения сигналов каналов таймера, а затем – конкретные моменты времени включения и выключения двигателей системы управления. Значения этих моментов времени рассчитывается в зависимости от расстояния и скорости перемещения исполнительных механизмов – толкателей, фиксатора, пневмозахватчика, разрезного ножа. Получается, что знание только уравнения равномерного движения позволяет полностью справится с программированием таймера.

В-третьих, задачи учат понимать циклограммы. Циклограмма – это универсальное средство представление процессов во времени. Универсальность можно проиллюстрировать следующими примерами:

•	если космическая ракета не вывела спутники на заданную орбиту, то технические специалисты следственной группы в первую очередь анализируют циклограмму процесса вывода спутников – нет ли в ней ошибок;
•	циклограмма процесса сборки машин на сборочном конвейере находится в центре внимания сначала тех, кто разрабатывает сам технологический процесс и оптимизирует его по производительности, затем тех, кто строит технологическую линию со всеми агрегатами, и наконец, тех, кто разрабатывает программы управления;
•	многообразные режимы стирки в современной стиральной машине – это прежде всего совокупность циклограмм;
•	многие программные инструменты тайм-менеджмента содержат в себе такие средства планирования работ и контроля их исполнения, которые основаны на представлениях всех дел в виде диаграмм, подобных циклограммам программируемого таймера; только шкала времени там не в секундах, а в часах/днях/неделях/декадах/месяцах.

В-четвертых, проект является простым примером реальной системы автоматизации проектирования (САПР). В большей части задач формируется спецификация циклограммы. Иначе говоря, программы участников тренировочного турнира "Осень-2018" занимаются генерацией программы для таймера – так называемой "прошивки". А это как раз есть автоматизация проектирования управляющих программ.

Можно убрать эти программы, рассчитать параметры циклограмм с помощью калькулятора или электронных таблиц, а затем загрузить полученные команды в таймер. Но тогда процесс проектирования и отладки станет слишком затратным по времени, энергии и материалам. При обнаружении ошибок и/или изменении скоростей движения исполнительных механизмов и расстояний между узлами производственной линии придется снова перепроектировать программу таймера. А про то, чтобы автоматически переносить данные из интернет-заказа в программу управления процессом, придется забыть. Только благодаря наличию программ проекта можно на основе таймера программного управления полностью автоматизировать исполнение индивидуальных заказов, формируемых на веб-сайте шоколадного ателье.

В-пятых, задачи проекта являются простым способом освоения школьниками широко распространенной в ИТ-сфере практики автоматической генерации программ. Любой современный сайт в интернет функционирует в среде браузера, который интерпретирует html-код веб-страниц в совокупности со спецификациями стилей из специальных файлов таблиц каскадных стилей (css-файлы). В то же время, значительная часть html-кода автоматически генерируется в среде этого же браузера с помощью программ на языке javascript, а на стороне сервера с помощью очень широкого спектра инструментов генерации и html-кода, и css-таблиц, и javascript-кода. Автоматическая генерация также активно используется при создании большинства современных программ, функционирующих не в среде интернет.

Во многих задачах проекта "Таймер" участники турнира занимаются автоматической генерацей кода управляющих программ, загружаемых в таймер. Именно это обстоятельство предопределяет непривычную для олимпиадного программирования ситуацию, когда в условиях задач фигурирует много выходных данных, не зависящих от входных. Представьте себе, что в учебной задаче нужно написать фрагмент кодогенератора, который порождает машинную программу реализации выражения языка Си "a = b = c = d = e = f = 5". При этом во входных данных фигурируют адреса переменных a..f, а в условии задачи приводится таблица кодировок машинных команд и методов адресации процессора семейства Intel x86 (Pentium, Celeron, Core Duo, Atom). В правильном решении этой учебной задачи в случае не использования приемов оптимизации кода будет 6 10-байтных машинных команд. И только байты 3..6, отвечающие за адрес переменной в команде, в разных командах будут различаться. Все остальное будет браться из условия задачи.

Аналогичная ситуация происходит при решении задач проекта "Таймер". Если в условии задачи 7 требуется сигналом канала 0 включить двигатель в момент 0 и выключить в момент, когда бруски начинки выдвинутся на L миллиметров от края участка разрезки, то выходная строка будет содержать текст "0 0 1 0 T 0", где T - время, вычисляемое через L и заданную скорость движения. В этой строке закодированы 2 команды: включить канал 0, выключить канал 0. И только параметр T второй из этих команд определяется входными данными.

В-шестых, задачи проекта тренируют способность разбираться в объемных описаниях автоматизируемого процесса и программировать в точном соответствии с этими описаниями. В наибольшей степени это относится к 10-й задаче. Эта задача меньше всего похожа не те задачи, что традиционно фигурируют в олимпиадном и спортивном программировании. В то же время, именно такие задачи доминируют в реальной практике автоматизации – хоть в управлении технологическими процессами, хоть в организационном управлении. Для реальной практики автоматизации характерны большое количество параметров и относительная простота функциональных зависимостей между ними. Сложность таких задач прежде всего в том, что легко что-то упустить или истолковать не так. Как говориться: "Тут все очень просто, но этого простого так много, что уже через пять минут чтения описания процесса голова оказывается переполненной".

В-седьмых, многие алгоритмы решения задач являются широко распространенными в профессиональном программировании не только цифровых систем управления. Прежде всего это относится к задачам 3-5.

В-восьмых, проект является достаточно наглядным примером осуществления широко распространенной технологии проектирования программ – Model-View-Control (MVC). Эта технология предполагает отделение представления (View) объектов на экране и в распечатках от модели обработки данных (Model) и управления этой обработкой (Control).

В проекте "Таймер" компоненты Model разрабатывают участники тренировочного турнира – именно они программируют всю требуемую обработку данных. Компоненты View предоставляются участникам в готовом виде – это изображение циклограмм, светодиодов и процессов на конфетной линии. Компонент Control также предоставляется в готовом виде – это кнопки Старт, Стоп, Шаг, Продолжить и другие элементы управления процессом. Правда эти элементы относятся не столько к средствам управления технологическим процессом, сколько с средствам автоматизации проектирования управляющих программ, т.е. САПР. В реальной практике САПР систем технологического управления содержат средства моделирования. Перечисленные выше элементы управляют моделированием, а не самим процессом. На этапе отладки автоматизированного технологического процесса эти средства могут управлять запуском отдельных технологических операций.

Только благодаря применению технологии MVC созданы условия для того, чтобы компоненты Model можно было создавать на различных языках программирования, как это делается в программистских турнирах.

В-девятых, решение задач проекта в турнире чемпионата дает наглядное представление о технологии инкрементного конструирования и инкрементной интеграции программ. Инкрементное конструирование в современном инженерном программировании предполагает создание и модульное тестирование отдельных компонентов создаваемого программного обеспечения (ПО). Решение каждой задачи проекта "Таймер" является компонентом, который "прирастает" к создаваемому ПО, что как раз и объясняет, почему конструирование инкрементное. Решение задачи участника турнира подвергается модульному тестированию в контестере. Вердикты проверяющих машин относятся только к решениям отдельных задач, а не в целом к проекту. Инкрементная интеграция осуществляется на веб-странице проекта "Таймер". В реальной практике каждый шаг интеграции добавляет функциональность включаемого в ПО компонента. В проекте "Таймер" в целях обучения сделано так, что функциональность, которая не реализована участником турнира, воспроизводится авторскими решениями команды ULIVT.

В-десятых, сам факт решения задач проекта переводит того, кто это сделал, в более высокую лигу. Вокруг нас много людей, говорящих про цифровую экономику и автоматизацию процессов с надеждой на светлое будущее. И вот среди этих людей появляется школьник, который умеет решать практические и зачастую прозаические для него задачи автоматизации. Для окружающих его мечтателей такой школьник становится реальным творцом этого самого светлого будущего.

Упрощения автоматизируемого процесса

Автоматизируемый процесс строился с таким расчетом, чтобы задачи оказались под силу школьникам. В этой связи он существенно упрощен, хотя стиль технического описания в постановках задач сохранен. В реальной практике программистам выдаются многие десятки страниц описаний технологического процесса и оборудования его автоматизации. Постановки задач они вынуждены разрабатывать сами.

В задачах проекта многие параметры представлены константами, не фигурирующими во входных данных. Это номера каналов таймера, некоторые задержки времени и размеры. В реальной практике такие параметры находятся в различных файлах спецификаций и базах данных.

Некоторые размерные параметры для упрощения сознательно исключены из условий задач. Очевидно, что расстояние между направляющими перемещения начинки не может равняться ширине бруска начинки. Брусок просто заклинит при движении. В реальной практике брусок должен быть хотя бы на 1 мм уже расстояния между направляющими. Очевидно, что толщину картона так же необходимо учитывать в расчетах размеров, расстояний и времени движения.

Технологичность некоторых операций для профессионального технолога может показаться весьма сомнительной. Понятно, как сделать специальную геометрию края камеры охлаждения, чтобы при задвижения коробки неотогнутый край коробки загнулся. Кроме специальной геометрии нужна также надсечка по месту изгиба. Однако для обеспечения устойчивости этой конструкции в условиях интенсивной эксплуатации придется потрудиться или даже изобрести иной способ загрузки конфет в коробку. Процесс загибания двух крайних полосок и термосварки физически осуществить еще сложнее. Там ведь нужно как-то предотвратить "замин" полосок и расплавление конфет. Да и существующие системы термосварки не впишутся ни в размеры, ни в ситуацию загруженных в коробку конфет. Здесь пришлось сформулировать задачу для программистов раньше, чем разработан эффективный процесс. Так, кстати, бывает достаточно часто. Многие операции неавтоматизированных технологических процессов подвергаются существенному изменению с целью улучшения условияй для автоматизации.

Задача 1. Код доступа

Эта задача для начинающих изучать раздел обработки строк. Здесь нужно суметь выделить числа, находящиеся в строках, и обработать их по нехитрому правилу – просто сложить. Подобная функциональность встречается в практических задачах довольно часто. В школьных задачниках по информатике неуспех ввода кода доступа обычно представляет каким-то текстом. Например: "Первая неудачная попытка", "Вторая неудачная попытка", "Доступ отвергнут, поскольку исчерпано допустимое число ошибок".

В проектах, где программные модули реализуют отдельные относительно несложные функции, принято разделять обработку данных и формирование сообщений о результатах этой обработки. В постановке задачи "Код доступа" результат формируется в виде трехбитного двоичного кода, значение которого интерпретируется средствами индикации с использованием аварийного светодиода. Если вдруг заказчик попросит вместо светодиода изобразить звуковые сигналы, то сама программа анализа кода доступа никак не изменится. Изменится только обработчик трехбитного кода, вырабатываемого этой программой.

Задача 2. Планирование процесса с помощью циклограммы
В этой задаче участник создает программу автоматической генерации циклограммы. В интернете можо найти десятки описаний циклограмм с объяснением либо самого смысла понятия "циклограмма", либо какого-то реального процесса, представленного этой циклограммой. Но вряд ли можно найти описание процесса автоматической генерации. Это функциональность коммерческих средств автоматизации проектирования, которые конкурируют между собой. Однако многим участникам школьного чемпионата Ульяновской области вторая задача будет под силу. Для большинства это будет первой программой автоматической генерации управляющей программы.

В каждой выходной строке этой задачи фигурирует пара команд: Канал, МоментВключения, 1; Канал, МоментВыключения, 0. На первый взгляд представление пары команд в строке выкажется избыточным. Много проще задать управление включением и выключением всего тремя числами: Канал, МоментВключения, МоментВыключения. Однако отделение команд включения от команд выключения имеет простое объяснение. Множество команд таймера непосредственно перед прошивкой упорядочивается в порядке возрастания времени. Благодаря этому в самом таймере будет список из команд вида (Канал, Время, Код операции). Главная управляющая программа таймера в каждый такт своей работы проверяет, достигло ли текущее время того времени, которое фигурирует в очередной невыполненной команде. Если текущее время достигло или превзошло, то очередная команда выполняется, а указатель на очередную невыполненную команду перемещается к следующему элементу упорядоченного списка команд. Столь простой процесс позволяет организовать параллельность выполнения технологических операций, управляемых таймером, благодаря независимости команды выключения от команды включения. В выходных строках задачи 2 команды включения и выключения приводятся парами для упрощения восприятия программы таймера. Представьте себе, если бы в выходных данных команды с параллельными технологичесими операциями, как в задачах 4 и 5, были бы упорядочены по возрастанию времени. Обнаружить ошибку в задании моментов времени включения и выключения в такой программе таймера было бы очень сложно. Пришлось бы для каждой команды включения искать парную ей команду выключения. Если один и тот же канал в одной программе несколько раз включается и выключается, то поиск ошибок становится еще более сложным.

Задача 3. Трассировка циклограммы и протоколирование состояний
Потребность в разработке такой программы часто встречается при разработке систем мониторинга и моделирования. В задаче применяется протоколирование в формате битовой карты. Это характерно для систем логического управления, где доминируют бинарные сигналы со значениями 0 и 1. Представление состояний бинарных сигналов в виде битовых карт активно используется в системах моделирования и схемотехнического проектирования цифровых устройств.

В задаче 3 осваивается техника интерпретации управляющих программ таймера. Команды таймера фигурируют во входных данных. При этом они уже объеденены в пары: включение и выключение. Это существеннно упрощает процесс трассировки и протоколирования. На практике такого может не быть, поскольку события включения и выключения в одном канале часто связаны с аналогичными событиями в других каналах. Например: "Через 1 секунду после начала подъема груза должна быть выключена блокировка заслонки", "Спустя 2 секунды после фиксации контейнера в точке загрузки должен быть открыт клапан ...". Разработчик управляющей программы часто группирует команды с учетом именно таких зависимостей. Ясно, что интерпретация команд, не сгрупированных в пары "Включить-Выключить", в процессах трассировки и протоколирования потребовала бы либо предварительной группировки, либо поиска в массиве команд для каждой команды включения парной ей команды выключения.

Задача 4. Мониторинг кратковременных перегрузок

Задача мониторинга перегрузок является также довольно универсальной. Кроме случая перегрузки системы энергопитания, как в проекте "Таймер", эта задача встречается в системах моделирования транспортных и компьютерных сетей, в задачах моделирования потоков покупателей в супермаркетах. При решении этой задачи придется разработать алгоритмический прием циклического обхода состояний всех каналов. Этот прием аналогичен тому, что делается при трассировке (предыдущая задача), но с двумя отличиями: а) иные элементы массива описания входной циклограммы; б) результатом является не вывод протокольных записей, а подсчет суммарной мощности оборудования, включенного через каналы таймера в конкретный момент времени.

Первое отличие связано с тем, что спецификация циклограммы на входе программы представлена не в формате команд таймера, а в уплотненном формате "Канал, МоментВключения, МоментВыключения, МощностьВключаемойНагрузки". В реальной практике задача мониторинга скорее всего решалась бы над кодом управляющей программы. При этом пришлось бы сначала запрограммировать формирование массива данных уплотненного формата и только после этого строить цикл обхода.

Задача 5. Мониторинг длительных перегрузок

Пятая задача является самой алгоритмически сложной. Здесь необходимо вычислять скользящее среднее. Это еще один пример универсальной функциональности. Когда трейдер на фондовой бирже принимает решение о том, какие ценные бумаги покупать, а какие продавать, то смотрит прежде всего на скользящие средние цен. Когда спасатели принимают решение, эвакуировать ли население поселка в зоне землетрясения, то смотрят прежде всего на результаты вычисления скользящих средних показателей сейсмографов. Сам по себе мониторинг длительных перегрузок спасает не только дорогостоящее оборудование электропитания (горят трансформаторы, взрываются аккумуляторы), но и здоровье персонала и исправность исполнительных устройств. Представьте себе, что будет, если перегорит силовое оборудование шахтного лифта или фуникулера. Умение программировать такие задачи, как подсчет скользящего среднего, часто входит в перечень квалификационных требований к профессиональным программистам.

Для решения этой задачи полезно запрограммировать базовые манипуляции со структурой данных, называемой кольцом. Обход массива данных в кольце на языке Си выглядит так: if(++i == length) i = 0;. Здесь length представляет собой размер кольца. Для length = 3 такой обход порождает следующую последовательность значений индекса i: 0, 1, 2, 0, 1, 2, ... . Если в кольцо постоянно записывать по индексу i новое значение мощности в такте мониторинга T, то каждый раз самое старое значение будет заменено самым новым. В результате совокупность мощностей, представленных в массиве, всегда будет той, что должна быть видимой через скользящее окно.

Задача 6. Планирование размера конфетной коробки

Одна из самых простых задач. Здесь нет не только циклов, но даже ветвлений. Начинающим участникам чемпионата рекомендуется нарисовать картинку с количественными и размерными переменными.

Задача 7. Подача брусков начинки

Это самая простая задача. Она чуть-чуть сложнее задачи "A+B", с помощью которой в соревновательных турнирах проверяется наличие связи с проверяющей машиной. Правда здесь придется вспомнить уравнение равномерного движения, чтобы рассчитать время выключения канала 0. В то же время, решение задачи имеет большую практическу ценность. Во время наладки линии мастер будет запускать эту программу и измерять реальное расстояине выдвижения брусков начинки. По результатам измерения будут регулироваться взаимные положения объектов линии производства конфет.
Выходная строка в задаче 7 содержит текст "0 0 1 0 T 0", где T – время, вычисляемое через расстояние перемещения и заданную скорость движения. В этой строке закодированы 2 команды. Первая команда включает сигнала канала 0 в момент 0, как требует условие задачи, а вторая – выключает этот канал.

В седьмой задаче есть еще одна особенность – в ее условии перечисляется назначение трех каналов, а используется всего один. Это в очень небольшой мере воспроизводит ситуацию со спецификациями задач в реальных проектах. В таких спецификациях обычно достаточно подробно описывается процесс и технические устройства его автоматизации. Из этого общего описания разработчики каждой программы управления выделяют только значимые для нее параметры и функциональные зависимости. Способность выделять такие части общего описания является важной составляющей умения разрабатывать цифровые системы управления.

Задача 8. Разрезание брусков начинки

В этой задаче нужно применять расчет времени движения по скорости и расстоянию в цикле, чтобы создать циклограмму управления отрезанием заданного числа кусочков каждой начинки. Задача довольно простая для всех, кто разобрался с программированием циклов и командами циклограммы.

Задача 9. Отправка начинки в камеру глазирования

В этой задаче нет ни ветвлений, ни циклов. После решения 7-й задачи можно сразу решать 9-ю – скорее всего решение пройдет с первого раза.

Задача 10. Упаковка конфет в коробку
Это самая "нудная" задача. В ней нет ни циклов, ни ветвлений, но есть такое большое количество параметров, которое провоцирует ошибки. Ее решение для некоторых может показаться подобным марафонскому бегу. В Нью-Йоркском марафоне участвуют обычно более 40 тысяч человек. Подавляющее большинство из них не претендует ни на какие призовые места. Они тратят деньги, чтобы добраться до Нью-Йорка зачастую за много тысяч километров. Они тратят время на изнурительные тренировки, не взирая на погоду. И все для того, чтобы доказать себе самому, а может еще кому-то, что имеют силу воли дотерпеть до финиша.

Самым противным при решении 10-й задачи является совершение ошибки в первых командах. Если обнаружена ошибка, например, во второй паре команд (это опускание заготовки коробки на стол упаковки), то придется пересчитывать времена во всех остальных командах. Чтобы защититься от такой ситуации, целесообразно написать генератор управляющей программы таким образом, чтобы между строками генерации команд таймера было приращение текущего времени. Например так (показано для тех, кто еще не освоил структуры/записи, но знает массивы; хотя можно обойтись и без массивов, сразу отправляя генерируемые команды таймера на выход):

•	t = t + dt; // продвижение текущего времени
•	dt = выражение с расстоянием и скоростью; // расчет длины i-й полоски циклограммы
•	ontime[i] = t; // момент включения
•	offtime[i] = t + dt; // момент выключения

Если после выключения в (i-1)-й паре команд таймера требуется какая-то пауза P до следующей команды включения, то в рамках приведенного решения это чуть модифицирует первое выражение: t = t + dt + P. Попробуйте подставить значения входных данных из первого теста 10-й задачи в программу с приращением времени и сверить результат с выходными данными. Наверняка вы почуствуете, как увеличилась взаимная независимость фрагментов когда, генерирующих различные команды таймера.

Замысел проекта "Многоканальный таймер программного управления"

Дочь дяди Саши на несколько недель положили в больницу. У нее было небольшое частное ателье по производству шоколадного ассорти под заказ. Всю работу выполняла она сама и две наемные работницы. Угроза банкротства из-за срыва поставок продукции напугала этих работниц и они соблазнились пердложениями конкурента, который давно их переманивал. Так дядя Саша остался с контрактными обязательствами один на один.

Поработав пару дней по 16 часов, он понял, что банкротства не избежать – его производительность труда была в несколько раз ниже бригады трех расторопных женщин. Для пожилого человека было заметной нагрузкой даже просто не перепутать, в какие коробки сколько каких канфет положить.

Поскольку до пенсии дядя Саша занимался контрольно-измерительной техникой и автоматикой, в голову пришла мысль автоматизировать наиболее рутиные операции. Имеющаяся техника шоколадного ателье поддерживала подготовку инградиентов и получение из них шоколадной массы и начинки. Для части неавтоматизированных операций дядя Саша хорошо понимал, как можно их автоматизировать. На балконе у него уже три года лежали несколько многоканальных реле программного управления, приобетеных задешево на распродаже имущества закрывающегося предприятия. С аппаратурой автоматизации вроде все складывалось неплохо, но программировать дядя Саша не умел, что заставило его обратиться за советом к сыну соседа Максиму, который учился на кафедре вычислительной техники Ульяновского политеха.

Макс сказал, что такие проекты автоматизации стоят довольно дорого. Однако услышав про многоканальный таймер, вспомнил, что слышал на кафедре о подготовке программистского турнира школьников, где должны быть задачи по такому таймеру. – "Может у них подходящих задач не хватает, а тут Вы со своим опытом автоматизации. Там может быть даже бартер – Вы им постановки задач для интересного проекта, а они Вам решения этих задач с исходными кодами. Вам же срочно нужен только опытный образец управляющей программы, или, как его еще называют – прототип. А летом приедут Ваши внуки на каникулы и доделают – они же вроде на программистов учатся. В турнире программируют на разных языках, что позволит всем Вашим внукам включиться в процесс, даже если языки программирования, которыми они владеют, не совпадают".

Так и вышло. Более того, ребята из политеха обещали, что управлять автоматизированным процессом дядя Саша сможет с ноутбука, достаточно только купить адаптер, позволяющий подключать входы программирования многоканальных таймеров к USB порту ноутбука. А наблюдать за ходом процесса можно будет через интернет браузер на любом компьютере и даже смартфоне. Встречная просьба политеховцев для упрощения объединить программно несколько таймеров в один очень понравилась дяде Саше – использование общего пространства линий управления проще планировать, чем несколько пространств отдельных таймеров.

1. Код доступа

На своей работе дядя Саша привык ограничивать доступ к оборудованию через кодовый замок. Понимая, что постоянный код доступа секретом долго не бывает, часто сменяемые коды не удерживает память, а записи на бумажках имеют свойство теряться, дадя Саша формировал коды на основе текущих дат. При этом ему приходилось довольно много времени тратить на перестройку кодового замка.

В создаваемой системе управления между клавиатурой ноутбука, с которой нужно вводить код доступа, и автоматикой находится управляющая программа. В этой программе легко реализовать правила формирования кода доступа даже с участием текущего времени, а не только даты. Затраты на перестройку кодового замка сводятся к нулю. Для прототипа дядя Саша сформулировал эти правила следующим образом:

•	код доступа представляет собой четырехзначное число, равное сумме из четырех слагаемых: четырехразрядный год текущей даты, номер месяца, номер дня и младшая цифра текущего часа;
•	если первый раз введенное число не совпадает с кодом доступа, аварийный светодиод должен загореться синим цветом;
•	второе несовпадение должно приводить к загоранию зеленым цветом;
•	третье несовпадение должно приводить к загоранию аварийной лампы красным цветом, что должно приводить к прекращению работы управляющей программы.

На вход программы управления доступом на первой строке через пробел подается номер попытки и код доступа, а на второй строке дата в формате ДД.ММ.ГГ (21-й век) и время в формате ЧЧ:ММ. На выход поступает трехразрядный код включения светодиодов (1 - включен, 0 - выключен): старший бит - красный (ошибка доступа с третьей попытки), средний бит - синий (ошибка доступа с первой попытки), младший бит - зеленый(ошибка доступа со второй попытки). Правильному вводу кода доступа соответствует комбинация из трех нулей.

2. Планирование процесса с помощью циклограммы

Многоканальный таймер программного управления обеспечивает включение и выключение сигнала на выходе определенного канала в заданные моменты времени. В таймерах дяди Саши одна команда таймера содержит три числа: номер канала K, момент времени Т, код действия A: 0 – выключить, 1 – включить. Совокупность команд образует управляющую программу. Эти программы принято отображать на специальных графиках, называемых циклограммами. Одна линия циклограммы соответствует выходу одного канала. Линия располагается вдоль оси времени и содержит полоски, каждая из которых отображает отрезок времени, когда на выходе канала активное состояние, т.е. канал включен. Чтобы канал 3 был включен на интервале от 3.5 секунды до 5.2 секунды, нужно ввести в таймер две команды: (3 3.5 1) и (3 5.2 0). На циклограмме этим двум командам соответствует полоска на линии 3 с началом в точке 3.5 и концом в точке 5.2 оси времени.

Часто процесс управления можно задавать более простым способом, нежели через последовательность команд таймера. В этом случае разрабатывают компьютерные программы автоматической генерации управляющих программ.

Зная, что из-за ошибок в циклограммах случается, что даже спутники не выходят на заданную орбиту, дядя Саша решил сначала потренировать участников турнира в понимании самих циклограмм и умении генерировать управляющую программу, характерную для линейного цикла технологического процесса. Примером такого цикла является конвейер, на каждом шаге которого выполняется одна операция. Каждую операцию инициирует включение линии таймера программного управления, а завершает ее выключение. Когда нумерация каналов совпадает с порядком выполнения операций, циклограмма имеет характер лестницы с разной шириной ступенек (вид сбоку).

На входе программы в первой строке идет 4 числа:

количество настраиваемых каналов N из диапазона 2 – 16;
номер первого задействованного канала F;
момент времени включения канала F;
интервал времени между выключением одного канала и включением следующего.
Во второй строке входных данных N чисел, каждое из которых задает длину отрезка времени исполнения операции из диапазона 0.1 – 50.0.
На выходе программы N строк, в каждой из которых фигурируют две команды канала таймера &ndash включения и выключения. Первые две команды (первая строка) относится к каналу F, следующие две (вторая строка) к каналу F+1 и т.д.

Все моменты времени и временные интервалы находятся в диапазоне 0 – 50 секунды с точностью до одной десятой.

3. Трассировка циклограммы и протоколирование состояний

В процессе отладки управляющих программ и наблюдения за ходом процесса возникает потребность трассировать циклограммы и протоколировать состояния выходов таймера. С трассировкой связаны две операции: отображение текущего момента времени и состояния выходов. Текущий момент времени обычно отображается вертикальной линией, перемещающейся вдоль оси времени. Состояние выходов отображается на светодиодах выходных каналов. Протоколирование состояний выходов каналов таймера строится по разному. Дядя Саша для третьей задачи сформулировал правило, согласно которому от начального до конечного момента интервала протоколирования записи в протокол выводятся с заданным периодом.

На вход программы в первой строке поступают четыре числа:

•	длина последовательности пар команд включения и выключения таймера N из диапазона 1 – 50;
•	момент времени начала протоколирования
•	момент времени завершения протоколирования;
•	интервал времени между соседними моментами протоколирования (период протоколирования).

В остальных N строках находятся пары команд включения и выключения каналов таймера в формате. Каждая команда содержит три числа: номер канала, момент времени исполнения команды, код операции: 0 – выключить, 1 – включить.

На выходе в первой строке количество протокольных записей P, а в следующих P строках сами записи. Каждая запись содержит 17 чисел: сначала момент времени протоколирования, а затем через пробел состояния 16 каналов (0 – выключен, 1 – включен).

Все моменты времени и временные интервалы находятся в диапазоне 0 – 50 секунды с точностью до одной десятой.

4. Мониторинг кратковременных перегрузок

Запуск технологической операции с помощью включения канала таймера зачастую связан с включением силового оборудования, имеющего значительное энергопотребление. Источники питания дяди Саши не рассчитаны на то, чтобы много агрегатов одновременно потребляли энергию, достаточную для выполнения операций. Чтобы избежать опасных перегрузок, средства проектирования снабжают контролем кратковременных перегрузок. Дядя Саша потребовал, чтобы факт перегрузки отражался красной линией трассировки, красным состоянием светодиода предупреждений об аварийных ситуациях и выводом протокольных записей. Факт перегрузки обнаруживается через сравнение суммы мощностей всех одновременно включенных агрегатов с предельно допустимой нагрузкой.

На вход программы на первой строке поступают период мониторинга, т.е. интервал времени между соседними проверками наличия перегрузки (0.1 – 3.0), предельно допустимая нагрузка W в ваттах (целое из диапазона 100 – 15000) и количество N спецификаций циклограммы (5 – 100). В каждой из следующих N строках находятся 4 числа:

•	номер канала (0 – 15),
•	момент времени включения,
•	момент времени выключения,
•	потребляемая мощность агрегатов, включаемых сигналом канала (100 – 3000).

На выходе в первой строке число протокольных записей P, а на следующих строках сами протокольные записи, каждая из которых содержит 3 числа:

•	момент времени фиксации перегрузки,
•	суммарная мощность одновременно включенных агрегатов S,
•	объем перегрузки в процентах (округлено до десятых долей), т.е. процентное отношение разницы (S-W) и предельной нагрузки W.

Считается, что в моменты включения и выключения каналов нагрузка агрегатов уже имеет место. Все моменты времени лежат в диапазоне 0.0 – 50.0 и задаются с точностью до десятой доли секунды.

5. Мониторинг длительных перегрузок

В системе управления длительные перегрузки питания опаснее кратковременных. Мониторинг длительных перегрузок выполняется с помощью так называемого скользящего среднего. Этот параметр оценивается как средние энергозатраты за отрезок времени, называемый скользящим окном. Если, например, период мониторинга равен 1 секунде, а ширина окна соответствует 5 отсчетам, то в качестве первой оценки скользящего среднего берется M[0] = (P[0]+P[1]+...+P[4])/5, в качестве второй M[1] = (P[1]+P[2]+...+P[5])/5 и т.д. Здесь P[I] – текущая нагрузка, которая равна суммарной мощности агрегатов, включенных каналами таймера в такте I мониторинга; сам момент времени равен произведению I на период мониторинга. Как только средняя нагрузка M[I] превысила предельно допустимую, левая граница соответствующего окна становится моментом начала фазы длительной перегрузки.

На вход программы на первой строке поступают период мониторинга (0.1 – 3.0), т.е. интервал времени оценки текущей нагрузки, ширина скользящего окна в количестве отсчетов мониторинга (0.1 – 5.0), предельно допустимая нагрузка W в ваттах (целое число из диапазона 1000 – 15000) и количество N спецификаций циклограммы (5 – 100). Каждая из следующих N строк содержит 4 числа:

•	номер канала (0 – 15),
•	момент времени включения,
•	момент времени выключения,
•	целочисленная потребляемая мощность агрегатов, включаемых сигналом канала, в ваттах.

На выходе в первой строке число протокольных записей, а на следующих строках сами протокольные записи, каждая из которых содержит 4 числа:

•	момент времени начала интервала длительной перегрузки,
•	момент времени конца длительной перегрузки в секундах с точностью до десятых,
•	средняя мощность S по всем точкам мониторинга из интервала времени перегрузки (округлена до десятых),
•	объем перегрузки в процентах, т.е. процентное отношение разницы (S-W) и предельной нагрузки W (округлено до десятых долей).

Считается, что в моменты включения и выключения каналов нагрузка агрегатов уже имеет место. Все моменты времени лежат в диапазоне 0.0 – 50.0 и задаются с точностью до десятой доли секунды.

6. Планирование размера конфетной коробки

Заказ на изготовление ассорти формируется на веб-странице шоколадного ателье. Данные из заказа передаются на входы программ, обслуживающих различные этапы процесса его выполнения. В заказе определяется количество и состав различных начинок. В ходе изготовления ассорти сначала нарезаются на дольки бруски с начинкой, затем дольки глазируются шоколадом, охлаждаются и упаковываются в коробки.

Средства автоматизации процесса, которые изготовил дядя Саша, содержат участок разрезания брусков с начинкой, участок глазирования, участок охлаждения и участок упаковки конфет в коробки. Участки глазирования и охлаждения дядя Саша автоматизировал самостоятельно, поскольку там очень ценные технологические новшества. Именно поэтому эти участки изображены на автоматической линии изготовления ассорти узкими полосками без раскрытия внутренностей.

Участок разрезания брусков содержит 6 полос для брусков начинки. Если в заказе предусматривается всего 4 вида начинки, то в процессе его выполнения будет задействовано 4 полосы и использовано 4 бруска. Все запланированные заказом бруски одновременно подаются толкателем в сторону разрезного дискового ножа. Управление подачей брусков и их разрезанием рассматривается в задачах 7 и 8. В шестой задаче необходимо спланировать размеры листа картона для низа конфетной коробки.

На вход программы подается 4 числа: число начинок N, количество конфет с одной начинкой K (для каждой начинки используется одно и то же число), длина дольки, высота начинки. На выходе через пробел должны следовать ширина и длина листа картона для дна коробки в миллиметрах. Исходные данные для расчета таковы:

•	ширина бруска начинки – 30 мм,
•	глазурование по каждому размеру (длине, ширине, высоте) добавляет 5 мм,
•	расположение конфет в рядах и колонках в фазе разрезания сохраняется таковым и в фазе загрузки в формируемую коробку.
•	с нижняя часть конфетной коробки формируется путем загибов краев вверх таким образом, чтобы бортик оказался на 5 мм выше верха конфеты,
•	длиной листа картона считается направления движения брусков начинки.

7. Подача брусков начинки

Для разрезания брусков с начинкой дядя Саша изготовил роликовый нож и организовал одновременную подачу до шести брусков поперек движения ножа. При этом задействовал 4 канала таймера: 0 – подача брусков с начинкой в сторону ножа с помощью толкателя, 1 – отправка конфетной коробки в контейнер, 2 – перемещение роликового ножа поперек направления подачи начинки, 3 – отведение роликового ножа в исходное положение.

Для седьмой задачи дядя Саша определил самую простую часть процесса – подачу брусков начинки в сторону ножа таким образом, чтобы первая линия разреза оказалась против роликового ножа. Результат этой задачи нужен ему для выполнения отладки механизма подачи брусков без порчи брусков. Поскольку линия ножа находится в самом начале зоны разрезания брусков, то момент времени включения канала 0 равен нулю, а момент времени выключения определяются исходя из скорости подачи начинки V и размера отрезаемой дольки S.

На вход задачи поступают через пробел два числа: скорость подачи брусков начинки V в мм/сек из диапазона 10.0 ÷ 20.0; размер отрезаемой дольки S в мм из диапазона 15.0 ÷ 30.0.

На выходе через пробел пара команд: команда включение и команда выключения толкателя для обеспечения подачи брусков на линию отрезания первого ряда долек. Каждая команда содержит три числа: номер канала; момент времени в секундах с точностью до десятых долей; код операции: 1 – включить, 0 – выключить.

8. Разрезание брусков начинки

Бруски начинки подаются толкателем со скоростью V в сторону участка глазирования в так называемом старт-стопном режиме. После подачи на размер отрезаемой дольки S подача останавливается и запускается движение отрезного дискового ножа вправо. Это движение должно остановиться после пересечения центром отрезного диска правой границы той линии движения брусков, которая соответствует самому большому номеру начинки из интернет-заказа. Если, например, в интернет-заказе фигурируют только две начинки 1 и 3, то нож должен остановиться у правой границы 3-й полосы движения начинок и затем вернуться в исходное состояние. После звершения возврата ножа должно запуститься выдвижение брусков начинки для отрезания следующей группы долек. В этом процессе легко разобраться, если посмотреть на его исполнение на веб-странице проекта, нажав на копку "Старт".

Для включения/выключения перемещения используются каналы таймера: 0 – подача брусков с начинкой в сторону ножа с помощью толкателя, 2 – перемещение роликового ножа поперек направления подачи начинки, 3 – отведение роликового ножа в исходное положение

На входе программы генерации циклограммы процесса разрезания поступают следующие данные:

•	количество начинок
•	номера начинок
•	количество долек, отрезаемых от одного бруска в диапазоне 2 ÷ 8;
•	размер отрезаемой дольки в мм из диапазона 15.0 ÷ 30.0;
•	скорость подачи начинки в мм/сек из диапазона 10.0 ÷ 20.0;
•	диаметр отрезного ножа в миллиметрах из диапазона 60 ÷ 80;
•	скорость подачи и возврата ножа в мм/сек из диапазона 10.0 ÷ 20.0;

На выходе программы сначала идет количество пар команд таймера N, а затем N строк, на каждой из которых через пробел пара команд в формате: номер канала K, момент времени Т, код действия A: 0 – выключить, 1 – включить. Например, две команды, обеспечивающие движение разрезающего диска вперед, могут выглядеть так: '2 2.6 1 2 4.1 0'. Первая из этих двух команд задает включение канала подачи ножа вперед в момент времени 2.6 секунды, а вторая определяет выключение двигателя перемещения ножа в момент времени 4.1 секунды. При этом нож в течение 1.5 секунды будет перемещаться с заданной скоростью. Очевидно, что в программе генерации команд разницу между временем включения и выключения необходимо определять по скорости и расстоянию перемещения. В расчете времени перемещения режущего диска нужно учитывать не только ширину полосы, по которой перемещаются бруски начинки, но и ширину разделительного барьера между полосами, которая равна 10 мм. Между моментами останова подачи начинки и стартом подачи ножа должен быть предусмотрен интервал времени 0.2 секунды. Такой же интервал должен быть предусмотрен между моментами останова ножа в правом положении и началом возврата ножа, а также между моментами останова возвращенного ножа и пуска подачи начинки. Программа разрезания рассчитана на загрузку в таймер в качестве самостоятельной отдельной программы, у которой относительное стартовое время равно нулю и вся циклограмма прижата к левой границе оси времени.
9. Отправка начинки в камеру глазирования

Фаза отправки начинки в камеру глазирования строится как продолжение программы разрезания. Для отправки используется дополнительный толкатель в формате гребенки. Подача вперед выполняется включением канала 4 таймера, а отвод на исходную позицию – включением канала 5. Решением турнирной задачи P9 должна быть программа, которая по строке входных данных формирует 4 команды: 2 команды включения и выключения перемещения начинки в камеру, 2 команды включения и выключения отвода толкателя в исходное положение. Время включенного состояния определяется скоростью перемещения толкателя V и расстоянием S между линией отрезания брусков начинки и краем камеры глазирования.

На вход программы через пробел поступают 3 числа: время старта отправки в секундах из диапазона 20.0 ÷ 300.0; расстояние S от линии отрезного дискового ножа до края камеры глазирования в миллиметрах из диапазона 150.0 ÷ 400.0; скорость перемещения толкателя в фазах подачи и возврата в мм/сек из диапазона 10.0 ÷ 20.0.

На выходе должны быть две строки. В первой строке через пробелы 2 команды программируемого таймера в формате: "K T C", где K – номер канала таймера, T – момент времени исполнения команды в секундах с точностью до десятых, C – команда таймера (1 – включить, 0 – выключить).

10. Упаковка конфет в коробку

После завершения охлаждения конфет подсистема управления камерой охлаждения выполняет следующие операции: а) уплотняет все конфеты в N колонок и R рядов, где N и R – число начинок и число конфет с одним видом начинки (это из интернет-заказа); б) выдвигает лоток с конфетами в зону упаковки; в) возвращает лоток из зоны упаковки. Операции выдвижения и возврата лотка запускаются по сигналам таймера программного управления, после выполнения им ряда подготовительных операций в зоне упаковки.

Первая подготовительная операция заключается в загрузке заготовки коробки в зону упаковки с помощью пневматических захватов. Сама заготовка имеет загнутые с трех сторон края (бортики), а четвертый край отогнут, чтобы можно было через эту сторону задвигать конфеты в коробку. Сигналом канала 6 программируемого таймера пневматические захваты берут заготовку коробки из зоны ее изготовления и позиционируют по центру ширины зоны упаковки и по дальней границе от камеры охлаждения. На экране симулятора производственного процесса дальняя граница является нижней. Длительность сигнала канала 6 задается во входных данных. По завершению этого времени заготовка находится в верхней позиции зоны перемещения. Опускание на стол в зоне упаковки обеспечивается сигналом канала 7. Его длительность определяется высотой зоны перемещения заготовки H и вертикальной скоростью перемещения узла подачи частей коробки. По завершению сигнала канала 7 в течение 0.5 секунды отрицательное давление пневматического загрузчика снимается и программируемый таймер должен выработать на выходе канала 8 сигнал подъема и убирания захвата на исходную позицию. Длительность этого сигнала такая же, как и длительность сигнала канала 7, опускающего заготовку.

Вторая подготовительная операция заключается в позиционировании заготовки таким образом, чтобы ее незагнутая сторона вплотную придвинулась к краю камеры охлаждения. Для этого дальняя граница зоны упаковки (это нижняя граница на веб-странице симулятора процесса) является подвижной. Сразу после завершения подъема пневматического загрузчика (выключение сигнала 8) таймер должен включить сигнал канала 9, с помощью которого коробка двигается в сторону камеры охлаждения. Длительность этого сигнала определяется продольной скоростью перемещения дальней границы зоны упаковки и расстоянием перемещения. Этим завершается вторая подготовительная операция и запускается процесс выдвижения лотка с конфетами из камеры охлаждения. Время выдвижения должно быть на 1 секунду больше времени перемещения на сумму двух расстояний: длины и высоты коробки.

Прежде чем запустить возврат лотка, таймер программного управления должен опустить фиксатор, предотвращающий перемещение конфет назад в камеру. Изначально фиксатор находится на линии границы камеры охлаждения. Сигналом канала 10 фиксатор перемещается на уровень линии загиба незагнутой стороны коробки. Длительность этого сигнала определяется продольной скоростью перемещения фиксатора и шириной незагнутой стороны заготовки коробки, т.е. высотой коробки. Затем фиксатор сигналом канала 11 опускается вниз. Длительность этого сигнала – 5 секунд. Завершение сигнала в канале 11 запускает процесс возврата лотка, который продолжается на 1 секунду больше времени, чем необходимо для преодоления суммы расстояний: длины и высоты коробки. После этого сигналом в канале 12 таймера за 5 секунд выводится в верхнее положение, а затем сигналом в канале 13 – в исходное положение на линии границы камеры охлаждения. Длительность этого сигнала такая же, как длительность сигнала в канале 10.

Завершение изготовления нижней части конфетной коробки выполняется следующим образом:

•	сначала сигналом канала 9 заготовка движется в сторону камеры охлаждения и за счет специальной геометрии края этой камеры незагнутая сторона заготовки загибается;
•	затем сигналом канала 14 вдоль края камеры охлаждения к краям коробки сдвигаются загибатели; их устройство таково, что при достижении незагнутых краев начинается загиб с прижатием; сигнал канала 14 должен иметь длительность, равную времени перемещения от края зоны упаковки к бортику коробки;
•	после выключения сигнала канала 14 должна быть пауза на термосварку в течение 3 секунд;
•	после завершения паузы термосварки сигналом канала 15 загибатели возвращаются к краям зоны упаковки.

Предпоследняя операция упаковки заключается в установки крышки коробки с помощью пневматических захватов. Зона, куда позиционируется крышка, находится в конце зоны упаковки (внизу, если смотреть на экране веб-модели процесса). Сначала сигналом канала 1 коробка с конфетами перемещается в конец зоны таким образом, чтобы край коробки не достиг границы 2 мм. Для этого время действия канала 1 задается так, чтобы при заданной скорости перемещения коробка прошла расстояние (ДлинаЗоныУпаковки - ДлинаКоробки - 2) миллиметров. После этого сигналом канала 6 крышка захватывается в зоне изготовления и позиционируется по поперечному центру зоны упаковки и на ее дальней границе (над коробкой с конфетами). Длительность сигнала 6 такая же, как при позиционировании пустой заготовки коробки в начале процесса упаковки. Затем сигналом канала 7 крышка опускается вниз. Длительность этого сигнала вычисляется через скорость перемещения, высоту уровня горизонтального перемещения пневматических захватов и высоту краев конфетной коробки – эта высота вычитается из расстояния между зоной перемещения пневмозахватов и уровнем стола упаковки, поскольку путь до верха коробки меньше пути до стола. По завершению сигнала канала 7 в течение 0.5 секунды отрицательное давления пневматического загрузчика снимается и программируемый таймер должен выработать на выходе канала 8 сигнал подъема и убирания пневмозахвата на исходную позицию. Длительность этого сигнала такая же, как и длительность сигнала канала 7, опускающего крышку коробки.
Последняя операция – перемещение упакованной коробки в контейнер. Эта операция выполняется сигналом канала 1. Длительность сигнала равна времени, необходимого для перемещения толкателя до края зоны упаковки. Это расстояние на 4 мм больше длины коробки, заданной во входных данных.

На вход программы через пробелы поступают:

•	ширина конфетной коробки;
•	длина коробки – расстояние между линией загиба незагнутого бортики и задней загнутой стороны;
•	высота бортика коробки;
•	высота уровня горизонтального перемещения пневматических захватов частей коробки;
•	время доставки части коробки пневматическими захватами к месту опускания на стол упаковки;
•	длина зоны упаковки – расстояние от края камеры охлаждения до края стола упаковки;
•	ширина зоны упаковки;
•	скорость всех перемещений – вертикальных и горизонтальных.

На выходе программы сначала идет количество пар команд таймера N, а затем N строк, на каждой из которых через пробел пара команд в формате: номер канала K, момент времени Т, код действия A: 0 – выключить, 1 – включить. Значения моментов времени должны быть округлены до сотых долей секунды.
